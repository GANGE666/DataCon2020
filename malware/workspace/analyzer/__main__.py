from analyzer.pe_analyzer import *
from analyzer.config import *
import multiprocessing
import argparse
import logging
import os
import json
import time
import subprocess

# logging.basicConfig()
# logger = logging.getLogger("Emoj")
# logger.setLevel(logging.INFO)

OUTPUT = '/home/jovyan/malware_final.txt'

def write_res(result):
    # print(result)
    with open(OUTPUT,'a+') as g:
        g.write("%s, %d\n" % (result[0],result[1]))

def run_one_file(path):
    a = pe_analyzer()
    return a.parse_one_file(path)

def main():
    parser = argparse.ArgumentParser(description='DataCon-Mal')
    parser.add_argument('cmd', metavar='CMD', type=str,
                        help='command from [run]')
    parser.add_argument('path', metavar='PATH', type=str,
                        help='The analyze target directory.')
    parser.add_argument('-o','--output', type=str,
                        help="output report")
    parser.add_argument('-j', '--cpu', dest='cpu',
                        help='num of processes')

    args = parser.parse_args()

    if args.path is None:
        print('No input path was specified')
        return False

    if not os.access(args.path, os.R_OK):
        print('The input file %s does not exist or is not readable' % args.path)
        return False
    
    if args.cpu is not None:
        try:
            int(args.cpu)
        except ValueError:
            print('Invalid value for --cpu: %s (expected a positive integer)'
                              % args.cpu)
            return False
    
    with open('clock.log','w') as clk:
        clk.write('Run task (%s)...\n' % (os.getpid()))
    start = time.time()

    global ANALYSIS_DIR
    ANALYSIS_DIR = os.path.abspath(args.path)
    if args.cpu:
        global PROCESSNUM
        if os.cpu_count() > int(args.cpu):
            PROCESSNUM = os.cpu_count()
        else:
            PROCESSNUM = int(args.cpu)

    P = multiprocessing.Pool(PROCESSNUM)

    if args.cmd == "run":
        files = os.listdir(args.path)
        for item in files:
            path = os.path.join(args.path,item)
            P.apply_async(run_one_file, args=(path, ), callback=write_res)

    else:
        print("The input command is wrong!")

    P.close()
    P.join()

    end = time.time()
    with open('clock.log','a') as clk:
        clk.write('Task runs %0.2f seconds.\n' % (end - start))

if __name__ == '__main__':
    main()